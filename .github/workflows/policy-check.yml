name: policy-check
on:
  pull_request:
    branches: [ main ]
permissions:
  contents: read
  pull-requests: write
  issues: read
jobs:
  policy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Diff da base
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          echo "files=$(git diff --name-only FETCH_HEAD...HEAD | tr '\n' ' ' )" >> $GITHUB_OUTPUT
      - name: Proibir clone via HTTPS do GitHub em arquivos alterados
        run: |
          CHANGED="${{ steps.diff.outputs.files }}"
          echo "$CHANGED" | tr ' ' '\n' | while read -r f; do
            [ -f "$f" ] || continue
            if grep -nE "git clone https://github.com/" "$f" >/dev/null; then
              echo "Use SSH para clone (git@github.com:usuario/repositorio.git) em: $f"; exit 1; fi
          done
      - name: Proibir scratch/ versionado
        run: |
          CHANGED="${{ steps.diff.outputs.files }}"
          echo "$CHANGED" | tr ' ' '\n' | grep '^scratch/' && { echo 'Não versione scratch/'; exit 1; } || true
      - name: Bloquear .amazonq na main
        if: github.base_ref == 'main'
        run: |
          echo "${{ steps.diff.outputs.files }}" | tr ' ' '\n' | grep '^.amazonq/' && { echo '.amazonq/ deve ficar na dev'; exit 1; } || true
      - name: Exigir atualização do Diário quando há código (apenas fora da main)
        if: github.base_ref != 'main'
        run: |
          CHANGED_FILES=$(echo "${{ steps.diff.outputs.files }}" | tr ' ' '\n')
          CODE_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\\.(py|ts|tsx|js|sh|go|rs)$' || true)
          if [ -n "$CODE_CHANGED" ]; then
            echo "$CHANGED_FILES" | grep -q "^\\.amazonq/rules/diario_de_bordo.md$" || { echo 'Atualize o Diário'; exit 1; }
          fi
      # Regras adicionais podem ser aplicadas via pre-commit local e ruleset organizacional
