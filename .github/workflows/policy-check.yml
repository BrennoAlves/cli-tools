name: policy-check
on:
  pull_request:
    branches: [ main ]
permissions:
  contents: read
  pull-requests: write
  issues: read
jobs:
  policy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Diff da base
        id: diff
        run: |
          set -euo pipefail
          BASE_SHA='${{ github.event.pull_request.base.sha }}'
          HEAD_SHA='${{ github.event.pull_request.head.sha }}'
          echo "üìÑ Base: $BASE_SHA"; echo "üìÑ Head: $HEAD_SHA"
          FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | tr '\n' ' ')
          echo "Arquivos alterados:"; echo "$FILES" | tr ' ' '\n'
          echo "files=$FILES" >> $GITHUB_OUTPUT
      - name: Echo arquivos alterados
        run: |
          echo "Arquivos do diff:"; echo "${{ steps.diff.outputs.files }}" | tr ' ' '\n'
      - name: Proibir clone via HTTPS (apenas linhas adicionadas)
        run: |
          set -euo pipefail
          BASE_SHA='${{ github.event.pull_request.base.sha }}'
          HEAD_SHA='${{ github.event.pull_request.head.sha }}'
          echo "Verificando 'git clone https://github.com/...' apenas em linhas ADICIONADAS do diff"
          # Extrai somente linhas adicionadas (ignora cabe√ßalhos '+++')
          ADDED=$(git diff --unified=0 "$BASE_SHA" "$HEAD_SHA" | sed -n '/^+[^+]/p' | sed 's/^+//')
          echo "Linhas adicionadas (preview):"; echo "$ADDED" | sed -n '1,20p' || true
          # Regex: in√≠cio de comando ou ap√≥s separadores ;|&,( seguido de 'git clone https://github.com'
          if echo "$ADDED" | grep -E "(^|[;|&\(][[:space:]]*)git[[:space:]]+clone[[:space:]]+https://github\.com/" >/dev/null; then
            echo "‚ùå Encontrado uso de HTTPS em comando git clone nas linhas adicionadas. Use SSH: git@github.com:usuario/repositorio.git"
            echo "Trechos que violam:"; echo "$ADDED" | grep -nE "(^|[;|&\(][[:space:]]*)git[[:space:]]+clone[[:space:]]+https://github\.com/" || true
            exit 1
          fi
          echo "‚úÖ Nenhum comando 'git clone https://github.com' encontrado nas linhas adicionadas"
      - name: Proibir scratch/ versionado
        run: |
          set -euo pipefail
          CHANGED="${{ steps.diff.outputs.files }}"
          echo "$CHANGED" | tr ' ' '\n' | grep '^scratch/' && { echo '‚ùå N√£o versione scratch/'; exit 1; } || echo "‚úÖ Sem scratch/ no diff"
      - name: Bloquear .amazonq na main
        if: github.base_ref == 'main'
        run: |
          set -euo pipefail
          echo "${{ steps.diff.outputs.files }}" | tr ' ' '\n' | grep '^\\.amazonq/' && { echo '‚ùå .amazonq/ deve ficar na dev'; exit 1; } || echo "‚úÖ Sem .amazonq/ no diff"
      - name: Exigir atualiza√ß√£o do Di√°rio quando h√° c√≥digo (apenas fora da main)
        if: github.base_ref != 'main'
        run: |
          CHANGED_FILES=$(echo "${{ steps.diff.outputs.files }}" | tr ' ' '\n')
          CODE_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\\.(py|ts|tsx|js|sh|go|rs)$' || true)
          if [ -n "$CODE_CHANGED" ]; then
            echo "$CHANGED_FILES" | grep -q "^\\.amazonq/rules/diario_de_bordo.md$" || { echo 'Atualize o Di√°rio'; exit 1; }
          fi
      # Regras adicionais podem ser aplicadas via pre-commit local e ruleset organizacional
